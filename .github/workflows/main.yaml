# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Development

on:
  pull_request:
    branches:
      - main

env:
  ## Sets environment variable
  PORT: 5000
  DB_HOST: localhost
  DB_PORT: 5010
  DB_USERNAME: postgres
  DB_PASSWORD: p4ssw0rd-t3st3-db
  DB_NAME: postgres
  GEMINI_API_KEY: gemini-api-key

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🔨 Install dependencies
        run: npm install

      - name: 💅🏾 Run lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: 🔨 Install dependencies
        run: npm install

      - name: 🧪 Run unit test
        run: npm run test

  integration:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Creating network
        run: docker network create "microservice-network"

      - name: 🏗️ Build docker-composer
        run: docker compose up -d

      - name: 🔎 Check running container
        run: docker ps -a

      - name: 🔨 Install dependencies
        run: npm install

      - name: 📊 Create tables
        run: npm run migration:run

      - name: 🔗 Run integration test
        run: npm run test:e2e

  coverage:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Creating network
        run: docker network create "microservice-network"

      - name: 🏗️ Build docker-composer
        run: docker compose up -d

      - name: 🔎 Check running container
        run: docker ps -a

      - name: 🔨 Install dependencies
        run: npm install

      - name: 📊 Create tables
        run: npm run migration:run

      - name: 🔗 Run coverage check
        run: npm run test:cov
